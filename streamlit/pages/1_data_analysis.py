import sys
import joblib
import streamlit as st
import numpy as np

from utils import (
    plot_disc_variables,
    plot_disc_vs_target,
    plot_cont_vs_cont,
    plot_cont_vs_target,
    plot_clusters_scatterplots,
)


st.set_page_config(page_title="Analyse des donn√©es", layout="wide")

st.title("Analyse des donn√©es")

# R√©cup√©ration des donn√©es
if "df" not in st.session_state:
    st.error(
        "Impossible d'acc√©der aux donn√©es, veuillez retournez sur la page principale pour les charger."
    )
    sys.exit()

df = st.session_state["df"]

# Intro
st.write(
    """
    - L'id√©e de pr√©senter les principaux r√©sultats d'analyse s'inscrit dans une logique de transparence vis-√†-vis des diff√©rentes parties prenantes (m√©tier, tech, client, audit, etc.)
    - Les uns et les autres pourront donc avoir de meilleures pistes pour comprendre les pr√©dictions, critiquer les m√©thodes utilis√©es, apporter des am√©liorations, etc.
    - Le notebook `notebooks/eda.ipynb` contient davantage d'informations et de pr√©cisions (je suis un apprenant, aidez-moi √† m'am√©liorer si vous passez par l√† üòâ).
"""
)

# S√©paration
st.divider()


# ---------------- Vision d'ensemble ----------------
st.subheader("Vision d'ensemble")
st.dataframe(df.head())

# Commentaire g√©n√©ral
st.write(
    """
    - On constate une r√©partition in√©gale de la variable cible : 16% des 6011 clients r√©silient leur contrat.
    - Les clients sont divis√©s en 2 grands groupes selon qu'ils aient ou non souscrit √† un service Internet.
    - On obtient de meilleures performances avec 2 mod√®les sp√©cialis√©s plut√¥t qu'avec un mod√®le unique.
    - Les lignes ayant des valeurs manquantes repr√©sentent un faible pourcentage des donn√©es (2.64%).
"""
)

# Suppression des valeurs manquantes
df.dropna(inplace=True)

# Cat√©gorisation des variables
disc = [
    "Gender",
    "Senior Citizen",
    "Partner",
    "Dependents",
    "Phone Service",
    "Multiple Lines",
    "Internet Service",
    "Online Security",
    "Online Backup",
    "Device Protection",
    "Tech Support",
    "Streaming TV",
    "Streaming Movies",
    "Contract",
    "Paperless Billing",
    "Payment Method",
]
cont = ["Monthly Charges", "Total Charges", "Tenure Months", "CLTV"]
target = "Churn Value"

# S√©paration Avec / Sans Internet
df_internet = df[df["Internet Service"] != "No"].copy()
df_no_internet = df[df["Internet Service"] == "No"].copy()

# Autres groupes de variables
disc_no_internet = [
    "Gender",
    "Senior Citizen",
    "Partner",
    "Dependents",
    "Multiple Lines",
    "Contract",
    "Paperless Billing",
    "Payment Method",
]
internet_services = [
    "Online Security",
    "Online Backup",
    "Device Protection",
    "Tech Support",
    "Streaming TV",
    "Streaming Movies",
]

# S√©paration
st.divider()


# ---------------- Variables discr√®tes ---------------
st.subheader("1. Variables discr√®tes")

# Cr√©ation de 2 colonnes pour chaque segment
internet, no_internet = st.columns(2)

with internet:
    st.markdown("#### Avec Internet")
    segment = "Avec Internet"

    # Distribution
    with st.expander("üìä Distribution"):
        plot_disc_variables(df=df_internet, cols=disc, segment=segment)

    # Taux de churn
    with st.expander("üö® Taux de churn"):
        plot_disc_vs_target(df=df_internet, cols=disc_no_internet, segment=segment)

    # Taux de churn (services Internet)
    with st.expander("üõú Taux de churn (services Internet)"):
        plot_disc_vs_target(
            df=df_internet,
            cols=internet_services,
            n_rows=1,
            n_cols=6,
            segment=segment,
            height=300,
            width=1200,
            fig_title=f"Taux de churn selon les services Internet, Segment = {segment}",
            subplot_titles=["<br>".join(col.split()) for col in internet_services],
        )


with no_internet:
    st.markdown("#### Sans Internet")
    segment = "Sans Internet"

    # Distribution
    with st.expander("üìä Distribution"):
        plot_disc_variables(
            df=df_no_internet,
            cols=disc_no_internet,
            n_rows=2,
            n_cols=4,
            segment=segment,
        )

    # Taux de churn
    with st.expander("üö® Taux de churn"):
        plot_disc_vs_target(df=df_no_internet, cols=disc_no_internet, segment=segment)

    # Taux de churn (services Internet)
    with st.expander("üõú Taux de churn (services Internet) `Impertinent`"):
        plot_disc_vs_target(
            df=df_no_internet,
            cols=internet_services,
            n_rows=1,
            n_cols=6,
            segment=segment,
            height=300,
            width=1200,
            fig_title=f"Taux de churn selon les services Internet, Segment = {segment}",
            subplot_titles=["<br>".join(col.split()) for col in internet_services],
            br_xtickslabels=True,
        )

with st.expander("üí¨ Commentaire"):
    st.write(
        """
        - Le taux de churn est globalement plus √©lev√© chez les clients ayant souscrit √† des services Internet (20% vs. 4%).
        - Pour l'ensemble des clients, on remarque que le taux de r√©siliation est plus √©lev√© lorsque le client :
            - n'a pas de partenaire
            - n'a pas de personnes √† charge
            - renouvelle mensuellement son contrat
            - ne poss√®de qu'une seule ligne de t√©l√©phone
        - Pour les cliens `Avec Internet`, le taux de churn est plus √©lev√© lorsque le client :
            - a plus de 65 ans
            - opte pour une facturation sans papier
            - r√®gle ses factures par ch√®que √©lectronique
        - Pour les clients `Sans Internet`, le churn est √©lev√© lorsque le client :
            - r√®gle ses factures via un ch√®que envoy√© par courrier
        - Ceci nous aide √† identifier ces variables comme potentiellement importantes pour notre mod√®le.
        - Concernant les diff√©rents services Internet, les clients qui s'y abonnent sont plus fid√®les.
        - Cette tendance est moins marqu√©e pour les services de streaming TV et films (peut-√™tre en raison de leur gratuit√©).
        - On observe √©galement que plus un client souscrit √† des options, plus il y'a des chances de le garder.
        - L'introduction dans notre mod√®le final d'une variable `Service Count` pour d√©nombrer les services Internet par client s'est av√©r√©e pertinente.
    """
    )

# S√©paration
st.divider()


# ---------------- Variables continues ---------------
st.subheader("2. Variables continues")

# Cr√©ation de 2 colonnes pour chaque segment
internet, no_internet = st.columns(2)


with internet:
    st.markdown("#### Avec Internet")
    segment = "Avec Internet"

    # Distribution
    with st.expander("üìà Distribution"):
        plot_cont_vs_target(df=df_internet, cols=cont, target_value=0, segment=segment)
        plot_cont_vs_target(df=df_internet, cols=cont, target_value=1, segment=segment)

    # Relations
    with st.expander("üîó Relations"):
        plot_cont_vs_cont(df=df_internet, cols=cont, segment=segment)


with no_internet:
    st.markdown("#### Sans Internet")
    segment = "Sans Internet"

    # Distribution
    with st.expander("üìà Distribution"):
        plot_cont_vs_target(
            df=df_no_internet, cols=cont, target_value=0, segment=segment
        )
        plot_cont_vs_target(
            df=df_no_internet, cols=cont, target_value=1, segment=segment
        )

    # Relations
    with st.expander("üîó Relations"):
        plot_cont_vs_cont(df=df_no_internet, cols=cont, segment=segment)

with st.expander("üí¨ Commentaire"):
    st.write(
        """
        - Un nombre important de clients qui partent ont de faibles charges totales.
        - Ceux qui r√©silient le font majoritairement dans les premiers mois, et au bout de 70 mois d'anciennet√©, il devient tr√®s difficile de perdre un client.
        - Les clients ayant une valeur vie > 6 000 ont une faible probabilit√© de r√©siliation.
        - Selon leur anciennet√©, il est possible de regrouper les clients en 2 cat√©gories (nuage de points entre la valeur client et l'anciennet√©).
        - La variable `Is New Client`, cr√©√© pour distinguer les clients ayant moins de 2 ans d'anciennet√© a eu un impact positif sur le segment `Avec Internet`.
        - On observe des groupes de charges mensuelles au travers des agglom√©rations verticales de points sur la 1√®re colonne des nuages de points.
        - En utilisant un algorithme de clustering, on a respectivement identifi√© 20 et 2 classes de `Monthly Charges` pour les clients avec et sans Internet.
        - Au sein de chaque cluster, il y'a une tr√®s forte corr√©lation entre l'anciennet√© et le montant des charges totales.
        - L'int√©gration des clusters de `Monthly Charges` am√©liore les performances du mod√®le sur le segment `Avec Internet` uniquement.
        - L'exclusion de `Total Charges`, justifi√©e par sa corr√©lation avec `Tenure Months` due aux clusters, s'est r√©v√©l√©e utile chez les clients `Avec Internet`.
        - Rien de particulier ne se d√©gage de l'analyse des coordonn√©es g√©ographiques, mais les variables `Lat` et `Long` n'ont pas √©t√© √©cart√©es.
        - Le mod√®le final des clients `Sans Internet` ne prend en entr√©e que 7 variables sur 16.
    """
    )

with st.expander("Corr√©lations entre `Total Charges` et `Tenure Months`"):
    from scipy.stats import pearsonr

    c1, c2 = "Total Charges", "Tenure Months"

    kmeans_internet = joblib.load("artifacts/internet/kmeans_internet.pkl")
    clusters_mapping_internet = joblib.load(
        "artifacts/internet/clusters_mapping_internet.pkl"
    )

    df_internet["Monthly Charges Group"] = kmeans_internet.predict(
        df_internet[["Monthly Charges"]]
    )
    df_internet["Monthly Charges Group"] = df_internet["Monthly Charges Group"].map(
        clusters_mapping_internet
    )

    corr_all = pearsonr(df_internet[c1], df_internet[c2]).statistic

    corr_clusters = []
    for i in range(20):
        tmp_df = df_internet.query("`Monthly Charges Group` == @i")
        corr_clusters.append(pearsonr(tmp_df[c1], tmp_df[c2]).statistic)

    st.write(
        f"""
        - Corr√©lation totale : {corr_all:.4f}
        - Moyenne des corr√©lations intra-groupes : {np.mean(corr_clusters):.4f}
    """
    )

    plot_clusters_scatterplots(
        df_internet, corr_all=corr_all, corr_clusters=corr_clusters
    )
